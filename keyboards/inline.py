from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import config

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()

    builder.button(text="üìä –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", callback_data="mood_record")
    builder.button(text="üìù –î–Ω–µ–≤–Ω–∏–∫", callback_data="diary_menu")
    builder.button(text="üè∑Ô∏è –ú–æ–∏ —Ç–µ–≥–∏", callback_data="tags_menu")
    builder.button(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics_menu")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")

    builder.adjust(2, 2, 1)
    return builder.as_markup()

def get_mood_rating_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()

    for score in range(1, 6):
        emoji = config.MOOD_EMOJIS[score]
        name = config.MOOD_NAMES[score]
        builder.button(
            text=f"{emoji} {score} - {name}",
            callback_data=f"mood_select_{score}"
        )

    builder.adjust(1)
    return builder.as_markup()

def get_tags_selection_keyboard(tags: list, selected_tags: list = None, current_category: str = None) -> InlineKeyboardMarkup:
    """–ö—Ä–∞—Å–∏–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    if selected_tags is None:
        selected_tags = []

    builder = InlineKeyboardBuilder()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–µ–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for tag in tags:
        category = tag.category or "–î—Ä—É–≥–∏–µ"
        if category not in categories:
            categories[category] = []
        categories[category].append(tag)

    selected_count = len(selected_tags)
    header_text = f"üè∑Ô∏è –í—ã–±–æ—Ä —Ç–µ–≥–æ–≤ ({selected_count} –≤—ã–±—Ä–∞–Ω–æ)"

    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if not current_category or current_category not in categories:
        builder.button(text="üìÇ –í–´–ë–ï–†–ò–¢–ï –ö–ê–¢–ï–ì–û–†–ò–Æ", callback_data="noop")

        for category_name in categories.keys():
            tag_count = len(categories[category_name])
            selected_in_category = len([tag for tag in categories[category_name] if tag.id in selected_tags])
            status = f" ({selected_in_category}/{tag_count})" if selected_in_category > 0 else ""

            builder.button(
                text=f"üìÅ {category_name}{status}",
                callback_data=f"category_{category_name.lower().replace(' ', '_')}"
            )

        builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–µ–≥", callback_data="tag_create")
        builder.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="tags_done")
        builder.adjust(1)

    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–≥–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_tags = categories[current_category]
        selected_in_category = len([tag for tag in category_tags if tag.id in selected_tags])

        builder.button(text=f"üìÇ {current_category} ({selected_in_category}/{len(category_tags)})", callback_data="noop")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 8 —Ç–µ–≥–æ–≤ –∑–∞ —Ä–∞–∑)
        for tag in category_tags[:8]:
            is_selected = tag.id in selected_tags
            status = "üü¢" if is_selected else "‚ö™"
            builder.button(
                text=f"{status} {tag.name}",
                callback_data=f"tag_toggle_{tag.id}"
            )

        # –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –±–æ–ª—å—à–µ 8, –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        if len(category_tags) > 8:
            builder.button(text="üìÑ –ï—â–µ —Ç–µ–≥–∏...", callback_data="tag_page_2")

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")
        builder.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="tags_done")
        builder.adjust(2)

    return builder.as_markup()

def get_diary_actions_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –¥–Ω–µ–≤–Ω–∏–∫–æ–º"""
    builder = InlineKeyboardBuilder()

    builder.button(text="üìù –ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø–∏—Å—å", callback_data="diary_write")
    builder.button(text="üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏", callback_data="diary_view")
    builder.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø–∏—Å—è–º", callback_data="diary_search")
    builder.button(text="üìÖ –ó–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥", callback_data="diary_period")

    builder.adjust(2, 2)
    return builder.as_markup()

def get_analytics_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    builder = InlineKeyboardBuilder()

    builder.button(text="üìä –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="analytics_week")
    builder.button(text="üìà –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å—è—Ü", callback_data="analytics_month")
    builder.button(text="üìÖ –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª", callback_data="analytics_quarter")
    builder.button(text="üìä –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –≥–æ–¥", callback_data="analytics_year")
    builder.button(text="üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º", callback_data="analytics_days")
    builder.button(text="üè∑Ô∏è –ê–Ω–∞–ª–∏–∑ —Ç–µ–≥–æ–≤", callback_data="analytics_tags")
    builder.button(text="üîç –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤", callback_data="analytics_patterns")

    builder.adjust(2, 2, 2, 1)
    return builder.as_markup()

def get_settings_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    builder = InlineKeyboardBuilder()

    builder.button(text="‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="settings_reminder_time")
    builder.button(text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="settings_reminders")
    builder.button(text="üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="settings_timezone")
    builder.button(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="settings_export")
    builder.button(text="üîÑ –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö", callback_data="settings_reset")

    builder.adjust(2, 2, 1)
    return builder.as_markup()

def get_confirmation_keyboard(action: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    builder = InlineKeyboardBuilder()

    builder.button(text="‚úÖ –î–∞", callback_data=f"confirm_{action}")
    builder.button(text="‚ùå –ù–µ—Ç", callback_data=f"cancel_{action}")

    builder.adjust(2)
    return builder.as_markup()

def get_back_keyboard(callback_data: str = "back_to_main") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    builder = InlineKeyboardBuilder()

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data)

    return builder.as_markup()

def get_cancel_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã"""
    builder = InlineKeyboardBuilder()

    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")

    return builder.as_markup()
