from datetime import date, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from database.db_manager import db_manager
from keyboards.inline import (
    get_analytics_keyboard,
    get_back_keyboard,
    get_main_menu_keyboard
)
from keyboards.reply import get_main_reply_keyboard
from config import logger
from utils.charts import chart_generator
from utils.helpers import (
    get_date_range,
    format_stats_message,
    format_patterns_message
)
from aiogram.types import InputFile

router = Router()

@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –±—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        start_date = date.today() - timedelta(days=7)
        end_date = date.today()

        stats = db_manager.get_mood_stats(user_id, start_date, end_date)

        if stats.total_entries == 0:
            await message.answer(
                "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.\n"
                "–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /mood –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üìä –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'",
                reply_markup=get_main_menu_keyboard()
            )
            return

        stats_message = format_stats_message(stats)
        await message.answer(stats_message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /stats –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@router.message(F.text == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
async def btn_analytics(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    await show_analytics_menu(message)

async def show_analytics_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        entries_count = len(db_manager.get_mood_entries(user_id, limit=1))

        if entries_count == 0:
            await message.answer(
                "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n" +
                "–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!",
                reply_markup=get_main_menu_keyboard()
            )
            return

        await message.answer(
            "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=get_analytics_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.callback_query(F.data.startswith("analytics_"))
async def callback_analytics_period(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        period = callback.data.split("_")[1]
        user_id = callback.from_user.id

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        if period == "week":
            start_date, end_date = get_date_range("week")
            period_name = "–Ω–µ–¥–µ–ª—é"
        elif period == "month":
            start_date, end_date = get_date_range("month")
            period_name = "–º–µ—Å—è—Ü"
        elif period == "quarter":
            start_date, end_date = get_date_range("quarter")
            period_name = "–∫–≤–∞—Ä—Ç–∞–ª"
        elif period == "year":
            start_date, end_date = get_date_range("year")
            period_name = "–≥–æ–¥"
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        entries = db_manager.get_mood_entries(user_id, start_date, end_date)

        if not entries:
            await callback.message.edit_text(
                f"üìä –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π {period_name} –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n" +
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥.",
                reply_markup=get_analytics_keyboard()
            )
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞
        chart_buffer = chart_generator.generate_mood_trend_chart(entries, start_date, end_date)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = db_manager.get_mood_stats(user_id, start_date, end_date)
        stats_message = format_stats_message(stats)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        try:
            await callback.message.delete()
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

        # –°–æ–∑–¥–∞–µ–º InputFile –∏–∑ BytesIO
        chart_file = InputFile(chart_buffer, filename=f"mood_chart_{period_name}.png")

        await callback.bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=chart_file,
            caption=f"üìà –ì—Ä–∞—Ñ–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ {period_name}\n\n{stats_message}",
            reply_markup=get_back_keyboard("analytics_menu")
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.")

@router.callback_query(F.data == "analytics_days")
async def callback_analytics_days(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"""
    try:
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        entries = db_manager.get_mood_entries(user_id)

        if len(entries) < 3:
            await callback.message.edit_text(
                "üìÖ –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –∑–∞–ø–∏—Å–∏.\n\n" +
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!",
                reply_markup=get_analytics_keyboard()
            )
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        chart_buffer = chart_generator.generate_weekday_stats_chart(entries)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
        weekday_stats = {}
        for entry in entries:
            weekday = entry.entry_date.weekday()
            if weekday not in weekday_stats:
                weekday_stats[weekday] = []
            weekday_stats[weekday].append(entry.mood_score)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
        weekday_names = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

        analysis_text = "üìÖ –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:\n\n"

        for weekday in range(7):
            if weekday in weekday_stats:
                scores = weekday_stats[weekday]
                avg_score = sum(scores) / len(scores)
                count = len(scores)

                day_name = weekday_names[weekday]
                emoji = "üòä" if avg_score >= 4 else "üòê" if avg_score >= 3 else "üò¢"

                analysis_text += f"{day_name}: {emoji} {avg_score:.1f}/5 ({count} –∑–∞–ø–∏—Å–µ–π)\n"
            else:
                analysis_text += f"{weekday_names[weekday]}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

        try:
            await callback.message.delete()
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

        # –°–æ–∑–¥–∞–µ–º InputFile –∏–∑ BytesIO
        chart_file = InputFile(chart_buffer, filename="weekday_stats.png")

        await callback.bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=chart_file,
            caption=analysis_text,
            reply_markup=get_back_keyboard("analytics_menu")
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.callback_query(F.data == "analytics_tags")
async def callback_analytics_tags(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —Ç–µ–≥–∞–º"""
    try:
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–≥–∞–º
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–≥–æ–≤
        entries = db_manager.get_mood_entries(user_id)

        if not entries:
            await callback.message.edit_text(
                "üè∑Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–≥–æ–≤.",
                reply_markup=get_analytics_keyboard()
            )
            return

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–≥–∞–º
        tag_stats = {}
        total_entries = len(entries)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_tags = db_manager.get_all_tags(user_id)

        for tag in all_tags:
            # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ç–µ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
            tag_usage = 0
            for entry in entries:
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∏ entry-tag –∏–∑ –±–∞–∑—ã
                # –ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
                pass

            if tag_usage > 0:
                tag_stats[tag.name] = tag_usage

        if not tag_stats:
            await callback.message.edit_text(
                "üè∑Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n" +
                "–î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–µ–≥–∏ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞!",
                reply_markup=get_analytics_keyboard()
            )
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        chart_buffer = chart_generator.generate_tags_pie_chart(tag_stats)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
        analysis_text = "üè∑Ô∏è –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤:\n\n"

        sorted_tags = sorted(tag_stats.items(), key=lambda x: x[1], reverse=True)
        for tag_name, count in sorted_tags[:10]:  # –¢–æ–ø 10 —Ç–µ–≥–æ–≤
            percentage = (count / total_entries) * 100 if total_entries > 0 else 0
            analysis_text += f"#{tag_name}: {count} —Ä–∞–∑ ({percentage:.1f}%)\n"

        try:
            await callback.message.delete()
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

        # –°–æ–∑–¥–∞–µ–º InputFile –∏–∑ BytesIO
        chart_file = InputFile(chart_buffer, filename="tags_pie_chart.png")

        await callback.bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=chart_file,
            caption=analysis_text,
            reply_markup=get_back_keyboard("analytics_menu")
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ —Ç–µ–≥–∞–º: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.callback_query(F.data == "analytics_patterns")
async def callback_analytics_patterns(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    try:
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        patterns = db_manager.get_mood_patterns(user_id)

        if not patterns:
            await callback.message.edit_text(
                "üîç –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n" +
                "–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π —Å —Ç–µ–≥–∞–º–∏ (–º–∏–Ω–∏–º—É–º 5 –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç–µ–≥).",
                reply_markup=get_analytics_keyboard()
            )
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        entries = db_manager.get_mood_entries(user_id)
        chart_buffer = chart_generator.generate_mood_distribution_chart(entries)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        patterns_message = format_patterns_message(patterns)

        try:
            await callback.message.delete()
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

        # –°–æ–∑–¥–∞–µ–º InputFile –∏–∑ BytesIO
        chart_file = InputFile(chart_buffer, filename="mood_patterns.png")

        await callback.bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=chart_file,
            caption=patterns_message,
            reply_markup=get_back_keyboard("analytics_menu")
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.callback_query(F.data == "analytics_menu")
async def callback_analytics_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        await callback.message.edit_text(
            "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=get_analytics_keyboard()
        )
        await callback.answer()
    except Exception as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ: {e}")
        try:
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
                reply_markup=get_analytics_keyboard()
            )
        except Exception as e2:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")
        await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def callback_back_to_main(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.message.edit_text(
            "üè† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
