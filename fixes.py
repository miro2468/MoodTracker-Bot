# –§–∞–π–ª —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –¥–ª—è MoodTracker Bot
# –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è,
# –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞

import logging
from typing import List, Dict, Any
from datetime import datetime, date
from database.db_manager import db_manager
from database.models import MoodEntry, Tag

logger = logging.getLogger(__name__)

class BotFixes:
    """–ö–ª–∞—Å—Å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –±–æ—Ç–∞"""

    @staticmethod
    def fix_missing_mood_tags():
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —Ç–µ–≥–∞–º–∏"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É
            # –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –∑–∞–ø–∏—Å–µ–π –∏ —Ç–µ–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–µ–π: {e}")
            return False

    @staticmethod
    def validate_database_integrity():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
            required_tables = [
                'users', 'mood_entries', 'tags',
                'mood_tags', 'user_settings'
            ]

            for table in required_tables:
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
                pass

            logger.info("–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î: {e}")
            return False

    @staticmethod
    def cleanup_old_data(days: int = 365):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)"""
        try:
            cutoff_date = date.today() - timedelta(days=days)

            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏
            # —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π

            logger.info(f"–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    @staticmethod
    def optimize_database():
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã VACUUM, ANALYZE –∏ —Ç.–¥.
            logger.info("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            return False

    @staticmethod
    def backup_database(backup_path: str = None):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not backup_path:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_path = f"backup_mood_tracker_{timestamp}.db"

            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ë–î
            logger.info(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
            return backup_path
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return None

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏

def get_mood_streak(user_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Ä–∏—é –¥–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    try:
        entries = db_manager.get_mood_entries(user_id, limit=30)
        if not entries:
            return 0

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        entries.sort(key=lambda x: x.entry_date, reverse=True)

        streak = 0
        current_date = date.today()

        for entry in entries:
            if entry.entry_date == current_date:
                streak += 1
                current_date -= timedelta(days=1)
            elif entry.entry_date == current_date - timedelta(days=1):
                # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –¥–µ–Ω—å –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç —Å–µ—Ä–∏—é
                break
            else:
                break

        return streak
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å–µ—Ä–∏–∏: {e}")
        return 0

def get_mood_insights(user_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å–∞–π—Ç—ã –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        entries = db_manager.get_mood_entries(user_id)

        if len(entries) < 7:
            return {"message": "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 7 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}

        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        recent_entries = sorted(entries[-7:], key=lambda x: x.entry_date)
        recent_avg = sum(e.mood_score for e in recent_entries) / len(recent_entries)

        older_entries = sorted(entries[-14:-7], key=lambda x: x.entry_date) if len(entries) >= 14 else []
        older_avg = sum(e.mood_score for e in older_entries) / len(older_entries) if older_entries else recent_avg

        trend = "—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ"
        if recent_avg > older_avg + 0.3:
            trend = "—É–ª—É—á—à–∞—é—â–µ–µ—Å—è üìà"
        elif recent_avg < older_avg - 0.3:
            trend = "—É—Ö—É–¥—à–∞—é—â–µ–µ—Å—è üìâ"

        # –õ—É—á—à–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        weekday_scores = {}
        for entry in entries:
            weekday = entry.entry_date.weekday()
            if weekday not in weekday_scores:
                weekday_scores[weekday] = []
            weekday_scores[weekday].append(entry.mood_score)

        best_weekday = max(weekday_scores.items(), key=lambda x: sum(x[1])/len(x[1]))[0]
        weekday_names = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

        return {
            "trend": trend,
            "recent_average": round(recent_avg, 1),
            "best_weekday": weekday_names[best_weekday],
            "total_entries": len(entries),
            "streak": get_mood_streak(user_id)
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤: {e}")
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å–∞–π—Ç—ã"}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö

def export_mood_data_to_json(user_id: int) -> Dict[str, Any]:
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç"""
    try:
        export_data = db_manager.export_user_data(user_id)

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        json_data = {
            "user_id": export_data["user_id"],
            "export_date": export_data["export_date"],
            "summary": {
                "total_entries": export_data["total_entries"],
                "date_range": f"{export_data['entries'][0]['date'] if export_data['entries'] else 'N/A'} - {export_data['entries'][-1]['date'] if export_data['entries'] else 'N/A'}"
            },
            "entries": export_data["entries"]
        }

        return json_data

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ JSON: {e}")
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

def generate_motivational_message(user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        streak = get_mood_streak(user_id)

        if streak == 0:
            messages = [
                "üåü –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è!",
                "üìä –í–∞—à –¥–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π –∂–¥–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π!",
                "üí≠ –ö–∞–∫ –ø—Ä–æ—à–µ–ª –≤–∞—à –¥–µ–Ω—å? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ–± —ç—Ç–æ–º!",
            ]
        elif streak < 3:
            messages = [
                f"üî• –£ –≤–∞—Å —É–∂–µ {streak} –¥–µ–Ω—å –ø–æ–¥—Ä—è–¥! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!",
                f"üìà {streak} –¥–µ–Ω—å –≤–µ–¥–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞ - –æ—Ç–ª–∏—á–Ω—ã–π —Å—Ç–∞—Ä—Ç!",
                f"üåü –°–µ—Ä–∏—è –∏–∑ {streak} –¥–Ω–µ–π! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
            ]
        elif streak < 7:
            messages = [
                f"üöÄ {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!",
                f"üí™ –ù–µ–¥–µ–ª—è –ø–æ—á—Ç–∏ –ø–æ–ª–Ω–∞! {streak} –¥–Ω–µ–π –ø–æ–∑–∞–¥–∏!",
                f"‚≠ê {streak} –¥–Ω–µ–π –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤ - —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!",
            ]
        else:
            messages = [
                f"üèÜ {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω!",
                f"üíé {streak} –¥–Ω–µ–π —Å–µ—Ä–∏–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                f"üåü {streak} –¥–Ω–µ–π - —ç—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –í—ã —Å—É–ø–µ—Ä!",
            ]

        import random
        return random.choice(messages)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return "üåü –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è!"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞

def get_bot_statistics() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        return {
            "total_users": 0,  # –ó–∞–≥–ª—É—à–∫–∞
            "total_entries": 0,  # –ó–∞–≥–ª—É—à–∫–∞
            "active_today": 0,  # –ó–∞–≥–ª—É—à–∫–∞
            "database_size": "0 MB"  # –ó–∞–≥–ª—É—à–∫–∞
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞: {e}")
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"}

# –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def create_test_data(user_id: int, days: int = 30):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        from datetime import timedelta
        import random

        for i in range(days):
            entry_date = date.today() - timedelta(days=i)

            # –°–ª—É—á–∞–π–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (—Å –Ω–µ–±–æ–ª—å—à–∏–º —Ç—Ä–µ–Ω–¥–æ–º –∫ —É–ª—É—á—à–µ–Ω–∏—é)
            base_mood = 3 + (i / days) * 1.5  # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
            mood_score = max(1, min(5, int(base_mood + random.uniform(-1, 1))))

            entry = MoodEntry(
                user_id=user_id,
                mood_score=mood_score,
                diary_text=f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∑–∞ {entry_date.strftime('%d.%m.%Y')}",
                entry_date=entry_date
            )

            db_manager.save_mood_entry(entry)

        logger.info(f"–°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞ {days} –¥–Ω–µ–π")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def init_fixes():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        BotFixes.validate_database_integrity()
        BotFixes.fix_missing_mood_tags()

        logger.info("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")

# –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
init_fixes()
