from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from database.db_manager import db_manager
from keyboards.inline import get_main_menu_keyboard, get_analytics_keyboard
from keyboards.reply import get_main_reply_keyboard
from config import config, logger
from messages import messages

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ–Ω—é –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
from handlers.diary import show_diary_menu
from handlers.tags import show_tags_menu
from handlers.settings import show_settings_menu

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db_manager.get_or_create_user(
            user_id=user_id,
            username=username,
            first_name=first_name
        )

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = f"""
üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MoodTracker Bot</b>, {first_name or '–¥—Ä—É–≥'}!

{messages.WELCOME_MESSAGE}
"""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            welcome_text,
            reply_markup=get_main_reply_keyboard()
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            messages.MENU_MAIN,
            reply_markup=get_main_menu_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_reply_keyboard()
        )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        await message.answer(
            messages.HELP_COMMAND,
            reply_markup=get_main_reply_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer(messages.ERROR_SERVICE_UNAVAILABLE)

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def btn_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    await cmd_help(message)

@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def btn_main_menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await message.answer(
            messages.MENU_MAIN,
            reply_markup=get_main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer(messages.ERROR_SERVICE_UNAVAILABLE)

@router.message(Command("privacy"))
async def cmd_privacy(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /privacy"""
    try:
        privacy_text = """
üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏

MoodTracker Bot —É–≤–∞–∂–∞–µ—Ç –≤–∞—à—É –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.

üìä –ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –º—ã —Å–æ–±–∏—Ä–∞–µ–º:
‚Ä¢ –û—Ü–µ–Ω–∫–∏ –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (1-5 –±–∞–ª–ª–æ–≤)
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
‚Ä¢ –¢–µ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤–ª–∏—è–Ω–∏—è
‚Ä¢ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π

üîê –ö–∞–∫ –º—ã –∑–∞—â–∏—â–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚Ä¢ –î–∞–Ω–Ω—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Ü–µ–ª–µ–π

üóëÔ∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞:
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.
"""
        await message.answer(privacy_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /privacy –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –±—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        from datetime import date, timedelta
        start_date = date.today() - timedelta(days=7)
        end_date = date.today()

        stats = db_manager.get_mood_stats(user_id, start_date, end_date)

        if stats.total_entries == 0:
            await message.answer(
                "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.\n"
                "–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /mood –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üìä –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'",
                reply_markup=get_main_menu_keyboard()
            )
            return

        from utils.helpers import format_stats_message
        stats_message = format_stats_message(stats)

        await message.answer(stats_message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /stats –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@router.callback_query(F.data == "mood_record")
async def callback_mood_record_from_main(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–∫–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        logger.info(f"Callback mood_record received from main menu by user {callback.from_user.id}")
        await callback.answer()

        # –°–æ–∑–¥–∞–µ–º message-like –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        class MockMessage:
            """Mock message object –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É callback –∏ message handlers"""
            def __init__(self, callback):
                self.from_user = callback.from_user
                self.chat = callback.message.chat
                self.bot = callback.bot

            async def answer(self, text, reply_markup=None, parse_mode=None, **kwargs):
                """Mock answer method –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
                try:
                    await self.bot.send_message(
                        chat_id=self.chat.id,
                        text=text,
                        reply_markup=reply_markup,
                        parse_mode=parse_mode,
                        **kwargs
                    )
                    logger.debug(f"MockMessage answer sent to user {self.from_user.id}")
                except Exception as e:
                    logger.error(f"Failed to send MockMessage answer: {e}")
                    raise

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ mood.py
        from handlers.mood import cmd_mood
        mock_message = MockMessage(callback)
        await cmd_mood(mock_message, state)
        logger.info(f"Successfully processed mood_record from main menu for user {callback.from_user.id}")

    except Exception as e:
        logger.error(f"Error in mood_record from main menu callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@router.callback_query(F.data == "analytics_menu")
async def callback_analytics_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–∫–∏ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    try:
        logger.info(f"Callback analytics_menu received from user {callback.from_user.id}")
        await callback.answer()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        user_id = callback.from_user.id
        entries = db_manager.get_mood_entries(user_id, limit=1)

        if not entries:
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text="üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!",
                reply_markup=get_main_menu_keyboard()
            )
            return

        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=get_analytics_keyboard()
        )
        logger.info(f"Successfully showed analytics menu for user {callback.from_user.id}")

    except Exception as e:
        logger.error(f"Error in analytics_menu callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")

@router.callback_query(F.data == "diary_menu")
async def callback_diary_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–∫–∏ –î–Ω–µ–≤–Ω–∏–∫"""
    try:
        logger.info(f"Callback diary_menu received from user {callback.from_user.id}")
        await callback.answer()

        # –°–æ–∑–¥–∞–µ–º MockMessage –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π show_diary_menu
        class MockMessage:
            def __init__(self, callback):
                self.from_user = callback.from_user
                self.chat = callback.message.chat
                self.bot = callback.bot

            async def answer(self, text, reply_markup=None, parse_mode=None, **kwargs):
                await self.bot.send_message(
                    chat_id=self.chat.id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode,
                    **kwargs
                )

        mock_message = MockMessage(callback)
        await show_diary_menu(mock_message)
        logger.info(f"Successfully showed diary menu for user {callback.from_user.id}")

    except Exception as e:
        logger.error(f"Error in diary_menu callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞")

@router.callback_query(F.data == "tags_menu")
async def callback_tags_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–∫–∏ –ú–æ–∏ —Ç–µ–≥–∏"""
    try:
        logger.info(f"Callback tags_menu received from user {callback.from_user.id}")
        await callback.answer()

        # –°–æ–∑–¥–∞–µ–º MockMessage –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π show_tags_menu
        class MockMessage:
            def __init__(self, callback):
                self.from_user = callback.from_user
                self.chat = callback.message.chat
                self.bot = callback.bot

            async def answer(self, text, reply_markup=None, parse_mode=None, **kwargs):
                await self.bot.send_message(
                    chat_id=self.chat.id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode,
                    **kwargs
                )

        mock_message = MockMessage(callback)
        await show_tags_menu(mock_message)
        logger.info(f"Successfully showed tags menu for user {callback.from_user.id}")

    except Exception as e:
        logger.error(f"Error in tags_menu callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–µ–≥–æ–≤")

@router.callback_query(F.data == "settings_menu")
async def callback_settings_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        logger.info(f"Callback settings_menu received from user {callback.from_user.id}")
        await callback.answer()

        # –°–æ–∑–¥–∞–µ–º MockMessage –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π show_settings_menu
        class MockMessage:
            def __init__(self, callback):
                self.from_user = callback.from_user
                self.chat = callback.message.chat
                self.bot = callback.bot

            async def answer(self, text, reply_markup=None, parse_mode=None, **kwargs):
                await self.bot.send_message(
                    chat_id=self.chat.id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode,
                    **kwargs
                )

        mock_message = MockMessage(callback)
        await show_settings_menu(mock_message)
        logger.info(f"Successfully showed settings menu for user {callback.from_user.id}")

    except Exception as e:
        logger.error(f"Error in settings_menu callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
