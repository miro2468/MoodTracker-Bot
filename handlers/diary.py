import logging
from datetime import date, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.db_manager import db_manager
from keyboards.inline import (
    get_diary_actions_keyboard,
    get_back_keyboard,
    get_main_menu_keyboard
)
from keyboards.reply import get_main_reply_keyboard
from utils.helpers import format_mood_entry

logger = logging.getLogger(__name__)

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class DiaryStates(StatesGroup):
    waiting_for_diary_text = State()
    waiting_for_search_query = State()

@router.message(Command("diary"))
async def cmd_diary(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /diary"""
    try:
        await show_diary_menu(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /diary –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.message(F.text == "üìù –î–Ω–µ–≤–Ω–∏–∫")
async def btn_diary(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –î–Ω–µ–≤–Ω–∏–∫"""
    await cmd_diary(message)

async def show_diary_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–Ω–µ–≤–Ω–∏–∫–∞"""
    await message.answer(
        "üìù –î–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_diary_actions_keyboard()
    )

@router.callback_query(F.data == "diary_write")
async def callback_diary_write(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ"""
    try:
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å–µ–≥–æ–¥–Ω—è
        today_entry = db_manager.get_today_mood(user_id)
        if today_entry and today_entry.diary_text:
            await callback.message.edit_text(
                "üìù –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ —Å–µ–≥–æ–¥–Ω—è:\n\n" +
                f"\"{today_entry.diary_text}\"\n\n" +
                "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å?",
                reply_markup=get_back_keyboard("diary_menu")
            )
            await state.set_state(DiaryStates.waiting_for_diary_text)
        else:
            await callback.message.edit_text(
                "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫:",
                reply_markup=get_back_keyboard("diary_menu")
            )
            await state.set_state(DiaryStates.waiting_for_diary_text)

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.callback_query(F.data == "diary_view")
async def callback_diary_view(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞"""
    try:
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        entries = db_manager.get_mood_entries(user_id, limit=10)

        if not entries:
            await callback.message.edit_text(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ.\n\n" +
                "–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏!",
                reply_markup=get_back_keyboard("diary_menu")
            )
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏
        response = "üìù –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ:\n\n"

        for i, entry in enumerate(entries, 1):
            entry_date = entry.entry_date.strftime("%d.%m.%Y")
            mood_emoji = ["üò¢", "üòï", "üòê", "üôÇ", "üòä"][entry.mood_score - 1]

            response += f"{i}. {entry_date} {mood_emoji}\n"

            if entry.diary_text:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è preview
                preview = entry.diary_text[:100] + "..." if len(entry.diary_text) > 100 else entry.diary_text
                response += f"   \"{preview}\"\n"

            response += "\n"

        response += "üìÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ó–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥' –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."

        await callback.message.edit_text(
            response,
            reply_markup=get_back_keyboard("diary_menu")
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–Ω–µ–≤–Ω–∏–∫–∞: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.callback_query(F.data == "diary_period")
async def callback_diary_period(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    try:
        user_id = callback.from_user.id

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        start_date = date.today() - timedelta(days=7)
        entries = db_manager.get_mood_entries(user_id, start_date=start_date)

        if not entries:
            await callback.message.edit_text(
                "üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n" +
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å.",
                reply_markup=get_back_keyboard("diary_menu")
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        entries_by_date = {}
        for entry in entries:
            date_key = entry.entry_date
            if date_key not in entries_by_date:
                entries_by_date[date_key] = []
            entries_by_date[date_key].append(entry)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"üìÖ –ó–∞–ø–∏—Å–∏ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {date.today().strftime('%d.%m.%Y')}:\n\n"

        for entry_date in sorted(entries_by_date.keys(), reverse=True):
            day_entries = entries_by_date[entry_date]
            date_str = entry_date.strftime("%d.%m.%Y")

            response += f"üìå {date_str}:\n"

            for entry in day_entries:
                time_str = entry.created_at.strftime("%H:%M") if entry.created_at else ""
                mood_emoji = ["üò¢", "üòï", "üòê", "üôÇ", "üòä"][entry.mood_score - 1]

                response += f"   {time_str} {mood_emoji}"
                if entry.diary_text:
                    preview = entry.diary_text[:50] + "..." if len(entry.diary_text) > 50 else entry.diary_text
                    response += f" \"{preview}\""
                response += "\n"

            response += "\n"

        await callback.message.edit_text(
            response,
            reply_markup=get_back_keyboard("diary_menu")
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.callback_query(F.data == "diary_search")
async def callback_diary_search(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –¥–Ω–µ–≤–Ω–∏–∫—É"""
    try:
        await callback.message.edit_text(
            "üîç –ü–æ–∏—Å–∫ –ø–æ –¥–Ω–µ–≤–Ω–∏–∫—É\n\n" +
            "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å—è—Ö:",
            reply_markup=get_back_keyboard("diary_menu")
        )

        await state.set_state(DiaryStates.waiting_for_search_query)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –¥–Ω–µ–≤–Ω–∏–∫—É: {e}")

@router.message(DiaryStates.waiting_for_search_query)
async def process_search_query(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        query = message.text.strip().lower()

        if not query:
            await message.answer("‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return

        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_entries = db_manager.get_mood_entries(user_id)

        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        matching_entries = []
        for entry in all_entries:
            if entry.diary_text and query in entry.diary_text.lower():
                matching_entries.append(entry)

        if not matching_entries:
            await message.answer(
                f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n" +
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.",
                reply_markup=get_diary_actions_keyboard()
            )
            await state.clear()
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        response = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ \"{query}\":\n\n"

        for i, entry in enumerate(matching_entries[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            date_str = entry.entry_date.strftime("%d.%m.%Y")
            time_str = entry.created_at.strftime("%H:%M") if entry.created_at else ""
            mood_emoji = ["üò¢", "üòï", "üòê", "üôÇ", "üòä"][entry.mood_score - 1]

            response += f"{i}. {date_str} {time_str} {mood_emoji}\n"

            # –í—ã–¥–µ–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            text = entry.diary_text
            query_start = text.lower().find(query.lower())
            if query_start != -1:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                start = max(0, query_start - 30)
                end = min(len(text), query_start + len(query) + 30)
                preview = "..." + text[start:end] + "..." if start > 0 or end < len(text) else text[start:end]

                # –í—ã–¥–µ–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º (–≤ Telegram markdown)
                preview = preview.replace(text[query_start:query_start + len(query)], f"**{text[query_start:query_start + len(query)]}**")

                response += f"   \"{preview}\"\n"

            response += "\n"

        if len(matching_entries) > 10:
            response += f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ {len(matching_entries)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."

        await message.answer(response, reply_markup=get_diary_actions_keyboard())
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await state.clear()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")

@router.message(DiaryStates.waiting_for_diary_text)
async def process_new_diary_entry(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫"""
    try:
        diary_text = message.text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
        from utils.helpers import validate_diary_text
        is_valid, error_message = validate_diary_text(diary_text)

        if not is_valid:
            await message.answer(
                f"‚ùå {error_message}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return

        user_id = message.from_user.id

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–Ω–µ–≤–Ω–∏–∫–∞
        # (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–∑–∂–µ)
        entry = db_manager.get_today_mood(user_id)

        if entry:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await message.answer(
                "‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é!\n\n" +
                f"üìù \"{diary_text}\"",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–Ω–µ–≤–Ω–∏–∫–∞
            entry = db_manager.MoodEntry(
                user_id=user_id,
                mood_score=3,  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                diary_text=diary_text
            )

            entry_id = db_manager.save_mood_entry(entry)
            await message.answer(
                "‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n" +
                f"üìù \"{diary_text}\"\n\n" +
                "üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'",
                reply_markup=get_main_menu_keyboard()
            )

        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞: {e}")
        await state.clear()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")

@router.callback_query(F.data == "diary_menu")
async def callback_diary_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –¥–Ω–µ–≤–Ω–∏–∫–∞"""
    try:
        await callback.message.edit_text(
            "üìù –î–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_diary_actions_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –¥–Ω–µ–≤–Ω–∏–∫–∞: {e}")

@router.callback_query(F.data == "back_to_main")
async def callback_back_to_main(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await state.clear()
        await callback.message.edit_text(
            "üè† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
