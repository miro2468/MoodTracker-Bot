import re
from datetime import datetime, date, timedelta
from typing import Optional, Tuple
from config import config

def format_mood_entry(entry, tags: list = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    emoji = config.MOOD_EMOJIS[entry.mood_score]
    mood_name = config.MOOD_NAMES[entry.mood_score]

    message = f"üåü –ó–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ {entry.entry_date}\n\n"
    message += f"üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {emoji} {entry.mood_score}/5 ({mood_name})\n"

    if tags:
        tag_names = [tag.name for tag in tags]
        message += f"üè∑Ô∏è –¢–µ–≥–∏: {', '.join(tag_names)}\n"

    if entry.diary_text:
        message += f"\nüìù –ó–∞–º–µ—Ç–∫–∞:\n{entry.diary_text}\n"

    message += f"\n‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {entry.created_at.strftime('%H:%M')}"

    return message

def validate_diary_text(text: str) -> Tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞"""
    if len(text) > config.DIARY_TEXT_LIMIT:
        return False, f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º {config.DIARY_TEXT_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤."

    if not text.strip():
        return False, "–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."

    return True, "OK"

def parse_time_string(time_str: str) -> Optional[datetime.time]:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM"""
    pattern = r'^([01]?[0-9]|2[0-3]):[0-5][0-9]$'
    if not re.match(pattern, time_str):
        return None

    try:
        hours, minutes = map(int, time_str.split(':'))
        return datetime.time(hours, minutes)
    except ValueError:
        return None

def get_date_range(period: str) -> Tuple[date, date]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞"""
    today = date.today()

    if period == "week":
        start_date = today - timedelta(days=7)
    elif period == "month":
        start_date = today - timedelta(days=30)
    elif period == "quarter":
        start_date = today - timedelta(days=90)
    elif period == "year":
        start_date = today - timedelta(days=365)
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–¥–µ–ª—è
        start_date = today - timedelta(days=7)

    return start_date, today

def format_stats_message(stats) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {stats.period}\n\n"
    message += f"üìà –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {stats.average_mood}/5\n"
    message += f"üéØ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {stats.total_entries}\n"

    if stats.best_day:
        message += f"üìÖ –õ—É—á—à–∏–π –¥–µ–Ω—å: {stats.best_day}\n"

    if stats.worst_day:
        message += f"üìâ –•—É–¥—à–∏–π –¥–µ–Ω—å: {stats.worst_day}\n"

    if stats.most_frequent_tags:
        message += "\nüèÜ –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Ç–µ–≥–∏:\n"
        for i, (tag_name, count) in enumerate(stats.most_frequent_tags[:5], 1):
            message += f"{i}. {tag_name} ({count} —Ä–∞–∑{'–∞' if count % 10 == 1 and count != 11 else '—Ä–∞–∑'})\n"

    return message

def get_mood_color(score: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    if score >= 5:
        return config.CHART_COLORS['excellent']
    elif score >= 4:
        return config.CHART_COLORS['good']
    elif score >= 3:
        return config.CHART_COLORS['neutral']
    elif score >= 2:
        return config.CHART_COLORS['bad']
    else:
        return config.CHART_COLORS['terrible']

def format_patterns_message(patterns: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    if not patterns:
        return "üîç –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."

    message = "üîç –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n\n"

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    patterns.sort(key=lambda x: abs(x.correlation), reverse=True)

    for pattern in patterns[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø 10
        trend = "üìà" if pattern.correlation > 0 else "üìâ"
        correlation_text = f"+{pattern.correlation}" if pattern.correlation > 0 else str(pattern.correlation)

        message += f"{trend} {pattern.tag_name}\n"
        message += f"   –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {correlation_text}\n"
        message += f"   –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {pattern.positive_entries}/{pattern.total_entries}\n\n"

    return message

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown"""
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text

def truncate_text(text: str, max_length: int = 100) -> str:
    """–û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text

    return text[:max_length - 3] + "..."

def get_weekday_name(date_obj: date) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
    weekdays = {
        0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        1: "–í—Ç–æ—Ä–Ω–∏–∫",
        2: "–°—Ä–µ–¥–∞",
        3: "–ß–µ—Ç–≤–µ—Ä–≥",
        4: "–ü—è—Ç–Ω–∏—Ü–∞",
        5: "–°—É–±–±–æ—Ç–∞",
        6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    return weekdays[date_obj.weekday()]
