from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.db_manager import db_manager
from database.models import Tag
from keyboards.inline import (
    get_main_menu_keyboard,
    get_back_keyboard,
    get_confirmation_keyboard
)
from keyboards.reply import get_main_reply_keyboard
from config import logger

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class TagStates(StatesGroup):
    waiting_for_tag_name = State()
    waiting_for_category_name = State()

@router.message(Command("tags"))
async def cmd_tags(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tags"""
    try:
        await show_tags_menu(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /tags –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.message(F.text == "üè∑Ô∏è –ú–æ–∏ —Ç–µ–≥–∏")
async def btn_tags(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ú–æ–∏ —Ç–µ–≥–∏"""
    await cmd_tags(message)

async def show_tags_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞–º–∏"""
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tags = db_manager.get_all_tags(user_id)

        if not tags:
            await message.answer(
                "üè∑Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–≥–æ–≤.\n\n" +
                "–¢–µ–≥–∏ –ø–æ–º–æ–≥–∞—é—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.\n" +
                "–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ç–µ–≥–∞!",
                reply_markup=get_main_menu_keyboard()
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–µ–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for tag in tags:
            category = tag.category or "–î—Ä—É–≥–∏–µ"
            if category not in categories:
                categories[category] = []
            categories[category].append(tag)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
        response = "üè∑Ô∏è –í–∞—à–∏ —Ç–µ–≥–∏:\n\n"

        for category, category_tags in categories.items():
            response += f"üìÇ {category}:\n"

            for tag in category_tags:
                status = "‚úÖ" if not tag.is_predefined else "üîí"
                response += f"   {status} {tag.name}\n"

            response += "\n"

        response += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–≥–∏ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()

        builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–µ–≥", callback_data="tag_create")
        builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–≥", callback_data="tag_delete")
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="tag_stats")

        builder.adjust(2, 1)

        await message.answer(
            response,
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —Ç–µ–≥–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.callback_query(F.data == "tag_create")
async def callback_tag_create(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞"""
    try:
        await callback.message.edit_text(
            "‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞\n\n" +
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '—Ä–∞–±–æ—Ç–∞', '—Å–ø–æ—Ä—Ç', '—Å–µ–º—å—è'):",
            reply_markup=get_back_keyboard("tags_menu")
        )

        await state.set_state(TagStates.waiting_for_tag_name)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–≥–∞: {e}")

@router.message(TagStates.waiting_for_tag_name)
async def process_tag_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–≥–∞"""
    try:
        tag_name = message.text.strip()

        if not tag_name:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return

        if len(tag_name) > 50:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤).")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–µ–≥
        user_id = message.from_user.id
        existing_tags = db_manager.get_all_tags(user_id)

        if any(tag.name.lower() == tag_name.lower() for tag in existing_tags):
            await message.answer(
                f"‚ùå –¢–µ–≥ '{tag_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
        await state.update_data(tag_name=tag_name)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await message.answer(
            f"üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ–≥–∞ '{tag_name}':\n\n" +
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:\n" +
            "‚Ä¢ –†–∞–±–æ—Ç–∞/–£—á–µ–±–∞\n" +
            "‚Ä¢ –û—Ç–Ω–æ—à–µ–Ω–∏—è\n" +
            "‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ\n" +
            "‚Ä¢ –î–æ—Å—É–≥\n" +
            "‚Ä¢ –ü–æ–≥–æ–¥–∞\n" +
            "‚Ä¢ –°–æ–±—ã—Ç–∏—è\n" +
            "‚Ä¢ –î—Ä—É–≥–æ–µ"
        )

        await state.set_state(TagStates.waiting_for_category_name)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–≥–∞: {e}")
        await state.clear()

@router.message(TagStates.waiting_for_category_name)
async def process_category_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        category_name = message.text.strip()

        if not category_name:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        tag_name = data.get('tag_name')
        user_id = message.from_user.id

        if not tag_name:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
        tag_id = db_manager.create_custom_tag(tag_name, category_name, user_id)

        await message.answer(
            f"‚úÖ –¢–µ–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n" +
            f"üè∑Ô∏è {tag_name}\n" +
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\n" +
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ–≥ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.",
            reply_markup=get_main_menu_keyboard()
        )

        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–ª —Ç–µ–≥ '{tag_name}' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}'")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–≥–∞: {e}")
        await state.clear()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–≥–∞.")

@router.callback_query(F.data == "tag_delete")
async def callback_tag_delete(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞"""
    try:
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏
        tags = db_manager.get_all_tags(user_id)
        custom_tags = [tag for tag in tags if not tag.is_predefined]

        if not custom_tags:
            await callback.message.edit_text(
                "üóëÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n\n" +
                "–¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã.",
                reply_markup=get_back_keyboard("tags_menu")
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Ç–µ–≥–∞–º–∏
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()

        for tag in custom_tags:
            builder.button(
                text=f"üóëÔ∏è {tag.name}",
                callback_data=f"delete_tag_{tag.id}"
            )

        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="tags_menu")
        builder.adjust(1)

        await callback.message.edit_text(
            "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n" +
            "‚ö†Ô∏è –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ–ª—å–∑—è.",
            reply_markup=builder.as_markup()
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞: {e}")

@router.callback_query(F.data.startswith("delete_tag_"))
async def callback_delete_specific_tag(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–≥–∞"""
    try:
        tag_id = int(callback.data.split("_")[2])
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–≥–µ
        tags = db_manager.get_all_tags(user_id)
        tag_to_delete = next((tag for tag in tags if tag.id == tag_id), None)

        if not tag_to_delete:
            await callback.answer("‚ùå –¢–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        if tag_to_delete.is_predefined:
            await callback.answer("‚ùå –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–≥ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–≥ '{tag_to_delete.name}'?\n\n" +
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=get_confirmation_keyboard(f"delete_tag_{tag_id}")
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞: {e}")

@router.callback_query(F.data.startswith("confirm_delete_tag_"))
async def callback_confirm_delete_tag(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞"""
    try:
        tag_id = int(callback.data.split("_")[3])
        user_id = callback.from_user.id

        # –£–¥–∞–ª—è–µ–º —Ç–µ–≥
        success = db_manager.delete_custom_tag(tag_id, user_id)

        if success:
            await callback.message.edit_text(
                "‚úÖ –¢–µ–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                reply_markup=get_back_keyboard("tags_menu")
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª —Ç–µ–≥ {tag_id}")
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥.\n–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                reply_markup=get_back_keyboard("tags_menu")
            )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞: {e}")

@router.callback_query(F.data == "tag_stats")
async def callback_tag_stats(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ–≥–∞–º"""
    try:
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        entries = db_manager.get_mood_entries(user_id)

        if not entries:
            await callback.message.edit_text(
                "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–≥–æ–≤.",
                reply_markup=get_back_keyboard("tags_menu")
            )
            return

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–≥–∞–º
        tags = db_manager.get_all_tags(user_id)
        tag_usage = {}

        for tag in tags:
            usage_count = 0
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
            tag_usage[tag.name] = usage_count

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤:\n\n"

        if tag_usage:
            sorted_usage = sorted(tag_usage.items(), key=lambda x: x[1], reverse=True)

            for tag_name, count in sorted_usage:
                if count > 0:
                    response += f"üè∑Ô∏è {tag_name}: {count} —Ä–∞–∑\n"
                else:
                    response += f"üè∑Ô∏è {tag_name}: –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è\n"
        else:
            response += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ–≥–∞–º."

        await callback.message.edit_text(
            response,
            reply_markup=get_back_keyboard("tags_menu")
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–≥–æ–≤: {e}")

@router.callback_query(F.data == "tags_menu")
async def callback_tags_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ç–µ–≥–æ–≤"""
    try:
        await callback.message.edit_text(
            "üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_back_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é —Ç–µ–≥–æ–≤: {e}")

@router.callback_query(F.data == "back_to_main")
async def callback_back_to_main(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await state.clear()
        await callback.message.edit_text(
            "üè† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")

@router.callback_query(F.data == "cancel")
async def callback_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    try:
        await state.clear()
        await callback.message.edit_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
