import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.db_manager import db_manager
from database.models import MoodEntry
from keyboards.inline import (
    get_main_menu_keyboard,
    get_mood_rating_keyboard,
    get_tags_selection_keyboard,
    get_back_keyboard,
    get_cancel_keyboard
)
from keyboards.reply import get_mood_quick_reply, get_main_reply_keyboard
from config import config
from utils.helpers import format_mood_entry

logger = logging.getLogger(__name__)

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class MoodStates(StatesGroup):
    waiting_for_mood_rating = State()
    waiting_for_tags_selection = State()
    waiting_for_diary_text = State()

@router.message(Command("mood"))
async def cmd_mood(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mood - –±—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    try:
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å–µ–≥–æ–¥–Ω—è
        today_entry = db_manager.get_today_mood(user_id)
        if today_entry:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –∑–∞–ø–∏—Å—å
            tags = []  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–≥–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏
            response = format_mood_entry(today_entry, tags)
            response += "\n\n‚ùì –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å?"

            await message.answer(
                response,
                reply_markup=get_mood_rating_keyboard()
            )
            return

        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        await start_mood_rating(message, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /mood –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.message(F.text == "üìä –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
async def btn_mood_record(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    await cmd_mood(message, state)

async def start_mood_rating(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ü–µ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    try:
        await state.set_state(MoodStates.waiting_for_mood_rating)

        await message.answer(
            "üåü –ö–∞–∫–æ–µ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è?",
            reply_markup=get_mood_rating_keyboard()
        )

        await message.answer(
            "üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏:",
            reply_markup=get_mood_quick_reply()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ü–µ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {e}")
        await state.clear()

@router.callback_query(F.data.startswith("mood_select_"))
async def callback_mood_select(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    try:
        mood_score = int(callback.data.split("_")[2])

        if not 1 <= mood_score <= 5:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(mood_score=mood_score)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏
        user_id = callback.from_user.id
        tags = db_manager.get_all_tags(user_id)

        if not tags:
            # –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–Ω–µ–≤–Ω–∏–∫—É
            await state.set_state(MoodStates.waiting_for_diary_text)
            await callback.message.edit_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {config.MOOD_EMOJIS[mood_score]} {config.MOOD_NAMES[mood_score]}\n\n"
                "üìù –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
                reply_markup=get_cancel_keyboard()
            )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–µ–≥–æ–≤
            await state.set_state(MoodStates.waiting_for_tags_selection)
            await callback.message.edit_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {config.MOOD_EMOJIS[mood_score]} {config.MOOD_NAMES[mood_score]}\n\n"
                "üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:",
                reply_markup=get_tags_selection_keyboard(tags)
            )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ü–µ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {e}")
        await state.clear()
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.message(MoodStates.waiting_for_mood_rating, F.text)
async def process_mood_quick_reply(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    try:
        text = message.text.strip()

        # –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É
        mood_mapping = {
            "üò¢ –û—á–µ–Ω—å –ø–ª–æ—Ö–æ": 1,
            "üòï –ü–ª–æ—Ö–æ": 2,
            "üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ": 3,
            "üôÇ –•–æ—Ä–æ—à–æ": 4,
            "üòä –û—Ç–ª–∏—á–Ω–æ": 5
        }

        if text not in mood_mapping:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
                reply_markup=get_mood_quick_reply()
            )
            return

        mood_score = mood_mapping[text]
        await state.update_data(mood_score=mood_score)

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∫–∞–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        user_id = message.from_user.id
        tags = db_manager.get_all_tags(user_id)

        if not tags:
            await state.set_state(MoodStates.waiting_for_diary_text)
            await message.answer(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {config.MOOD_EMOJIS[mood_score]} {config.MOOD_NAMES[mood_score]}\n\n"
                "üìù –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
                reply_markup=get_cancel_keyboard()
            )
        else:
            await state.set_state(MoodStates.waiting_for_tags_selection)
            await message.answer(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {config.MOOD_EMOJIS[mood_score]} {config.MOOD_NAMES[mood_score]}\n\n"
                "üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:",
                reply_markup=get_tags_selection_keyboard(tags)
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
        await state.clear()

@router.callback_query(F.data.startswith("tag_toggle_"))
async def callback_tag_toggle(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞"""
    try:
        tag_id = int(callback.data.split("_")[2])

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
        data = await state.get_data()
        selected_tags = data.get('selected_tags', [])

        if tag_id in selected_tags:
            selected_tags.remove(tag_id)
        else:
            selected_tags.append(tag_id)

        await state.update_data(selected_tags=selected_tags)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        user_id = callback.from_user.id
        tags = db_manager.get_all_tags(user_id)

        mood_score = data.get('mood_score')
        mood_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {config.MOOD_EMOJIS[mood_score]} {config.MOOD_NAMES[mood_score]}\n\n" if mood_score else ""

        selected_count = len(selected_tags)
        tags_text = f"üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ ({selected_count} –≤—ã–±—Ä–∞–Ω–æ):" if selected_count > 0 else "üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏:"

        await callback.message.edit_text(
            mood_text + tags_text,
            reply_markup=get_tags_selection_keyboard(tags, selected_tags)
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ–≥–∞: {e}")

@router.callback_query(F.data == "tags_done")
async def callback_tags_done(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤"""
    try:
        await state.set_state(MoodStates.waiting_for_diary_text)

        data = await state.get_data()
        mood_score = data.get('mood_score')
        selected_tags = data.get('selected_tags', [])

        mood_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {config.MOOD_EMOJIS[mood_score]} {config.MOOD_NAMES[mood_score]}\n\n" if mood_score else ""
        tags_text = f"–í—ã–±—Ä–∞–Ω–æ —Ç–µ–≥–æ–≤: {len(selected_tags)}\n\n" if selected_tags else ""

        await callback.message.edit_text(
            mood_text + tags_text + "üìù –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
            reply_markup=get_cancel_keyboard()
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤: {e}")

@router.callback_query(F.data == "tags_reset")
async def callback_tags_reset(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤"""
    try:
        await state.update_data(selected_tags=[])

        data = await state.get_data()
        user_id = callback.from_user.id
        tags = db_manager.get_all_tags(user_id)
        mood_score = data.get('mood_score')

        mood_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {config.MOOD_EMOJIS[mood_score]} {config.MOOD_NAMES[mood_score]}\n\n" if mood_score else ""

        await callback.message.edit_text(
            mood_text + "üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏:",
            reply_markup=get_tags_selection_keyboard(tags, [])
        )

        await callback.answer("–í—ã–±–æ—Ä —Ç–µ–≥–æ–≤ —Å–±—Ä–æ—à–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤: {e}")

@router.message(MoodStates.waiting_for_diary_text)
async def process_diary_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞"""
    try:
        diary_text = message.text.strip() if message.text != "‚ùå –û—Ç–º–µ–Ω–∞" else ""

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
        from utils.helpers import validate_diary_text
        is_valid, error_message = validate_diary_text(diary_text)

        if not is_valid:
            await message.answer(
                f"‚ùå {error_message}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞':"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        mood_score = data.get('mood_score')
        selected_tags = data.get('selected_tags', [])

        if not mood_score:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –æ—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        user_id = message.from_user.id
        entry = MoodEntry(
            user_id=user_id,
            mood_score=mood_score,
            diary_text=diary_text if diary_text else None
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        entry_id = db_manager.save_mood_entry(entry, selected_tags)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        tags = []
        if selected_tags:
            all_tags = db_manager.get_all_tags(user_id)
            tags = [tag for tag in all_tags if tag.id in selected_tags]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response = format_mood_entry(entry, tags)
        await message.answer(response, reply_markup=get_main_menu_keyboard())

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è {entry_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {e}")
        await state.clear()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")

@router.callback_query(F.data == "cancel")
async def callback_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    try:
        await state.clear()
        await callback.message.edit_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def message_cancel(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await state.clear()
    await message.answer(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_menu_keyboard()
    )
