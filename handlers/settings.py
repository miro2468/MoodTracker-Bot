import logging
from datetime import time
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.db_manager import db_manager
from keyboards.inline import (
    get_settings_keyboard,
    get_main_menu_keyboard,
    get_back_keyboard,
    get_confirmation_keyboard
)
from keyboards.reply import get_main_reply_keyboard
from utils.helpers import parse_time_string

logger = logging.getLogger(__name__)

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SettingsStates(StatesGroup):
    waiting_for_reminder_time = State()
    waiting_for_timezone = State()

@router.message(Command("settings"))
async def cmd_settings(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    try:
        await show_settings_menu(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /settings –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def btn_settings(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await cmd_settings(message)

async def show_settings_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = db_manager.get_user_settings(user_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö
        from utils.scheduler import reminder_scheduler
        reminder_info = reminder_scheduler.get_user_reminder_info(user_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        response = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"

        response += f"‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {settings.reminder_time.strftime('%H:%M')}\n"
        response += f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if settings.daily_reminder else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
        response += f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings.language}\n\n"

        if reminder_info['active']:
            from datetime import datetime
            next_run = reminder_info.get('next_run')
            if next_run:
                next_time = datetime.fromisoformat(next_run)
                response += f"üìÖ –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {next_time.strftime('%d.%m.%Y %H:%M')}\n"
        else:
            response += "üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã\n"

        await message.answer(
            response,
            reply_markup=get_settings_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.callback_query(F.data == "settings_reminder_time")
async def callback_settings_reminder_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        await callback.message.edit_text(
            "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n" +
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 21:00):",
            reply_markup=get_back_keyboard("settings_menu")
        )

        await state.set_state(SettingsStates.waiting_for_reminder_time)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

@router.message(SettingsStates.waiting_for_reminder_time)
async def process_reminder_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        time_str = message.text.strip()
        reminder_time = parse_time_string(time_str)

        if not reminder_time:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n\n" +
                "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 21:00):"
            )
            return

        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = db_manager.get_user_settings(user_id)
        settings.reminder_time = reminder_time

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        db_manager.update_user_settings(settings)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if settings.daily_reminder:
            from utils.scheduler import reminder_scheduler
            await reminder_scheduler.schedule_user_reminder(user_id, reminder_time)

        await message.answer(
            f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time.strftime('%H:%M')}",
            reply_markup=get_main_menu_keyboard()
        )

        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ {reminder_time}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await state.clear()

@router.callback_query(F.data == "settings_reminders")
async def callback_settings_reminders(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = db_manager.get_user_settings(user_id)

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        settings.daily_reminder = not settings.daily_reminder
        db_manager.update_user_settings(settings)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        from utils.scheduler import reminder_scheduler
        if settings.daily_reminder:
            await reminder_scheduler.schedule_user_reminder(user_id, settings.reminder_time)
        else:
            await reminder_scheduler.cancel_user_reminder(user_id)

        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if settings.daily_reminder else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"

        await callback.message.edit_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {status_text}!\n\n" +
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_settings_keyboard()
        )

        await callback.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {status_text}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

@router.callback_query(F.data == "settings_timezone")
async def callback_settings_timezone(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    try:
        await callback.message.edit_text(
            "üåç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞\n\n" +
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTC+X –∏–ª–∏ UTC-X\n" +
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã, UTC-5 –¥–ª—è –ù—å—é-–ô–æ—Ä–∫–∞):",
            reply_markup=get_back_keyboard("settings_menu")
        )

        await state.set_state(SettingsStates.waiting_for_timezone)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")

@router.message(SettingsStates.waiting_for_timezone)
async def process_timezone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    try:
        timezone_str = message.text.strip()

        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
        import re
        if not re.match(r'^UTC[+-]\d{1,2}$', timezone_str):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç UTC+X –∏–ª–∏ UTC-X (–Ω–∞–ø—Ä–∏–º–µ—Ä: UTC+3):"
            )
            return

        user_id = message.from_user.id

        # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_manager.update_user_timezone(user_id, timezone_str)

        await message.answer(
            f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {timezone_str}",
            reply_markup=get_main_menu_keyboard()
        )

        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {timezone_str}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
        await state.clear()

@router.callback_query(F.data == "settings_export")
async def callback_settings_export(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        export_data = db_manager.export_user_data(user_id)

        if not export_data['entries']:
            await callback.message.edit_text(
                "üì§ –£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.\n\n" +
                "–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!",
                reply_markup=get_settings_keyboard()
            )
            return

        # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª
        import csv
        import io

        output = io.StringIO()
        writer = csv.writer(output)

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow(['–î–∞—Ç–∞', '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–û—Ü–µ–Ω–∫–∞', '–ó–∞–º–µ—Ç–∫–∞', '–¢–µ–≥–∏'])

        # –î–∞–Ω–Ω—ã–µ
        for entry in export_data['entries']:
            writer.writerow([
                entry['date'],
                entry['mood_name'],
                entry['mood_score'],
                entry['diary_text'],
                entry['tags']
            ])

        csv_content = output.getvalue()
        output.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        from io import BytesIO
        csv_bytes = BytesIO(csv_content.encode('utf-8'))

        await callback.message.delete()

        await callback.bot.send_document(
            chat_id=callback.message.chat.id,
            document=csv_bytes,
            filename=f"mood_tracker_export_{user_id}.csv",
            caption="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV\n\n" +
                   f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {export_data['total_entries']}\n" +
                   f"–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_data['export_date'][:10]}",
            reply_markup=get_back_keyboard("settings_menu")
        )

        await callback.answer("–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ.")

@router.callback_query(F.data == "settings_reset")
async def callback_settings_reset(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        entries = db_manager.get_mood_entries(user_id)
        entries_count = len(entries)

        if entries_count == 0:
            await callback.message.edit_text(
                "üóëÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–±—Ä–æ—Å–∞.",
                reply_markup=get_settings_keyboard()
            )
            return

        await callback.message.edit_text(
            f"üóëÔ∏è –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö\n\n" +
            f"–£ –≤–∞—Å {entries_count} –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.\n\n" +
            "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n" +
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n" +
            "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?",
            reply_markup=get_confirmation_keyboard("reset_data")
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

@router.callback_query(F.data == "confirm_reset_data")
async def callback_confirm_reset_data(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        user_id = callback.from_user.id

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        await callback.message.edit_text(
            "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.\n\n" +
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_menu_keyboard()
        )

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–±—Ä–æ—Å–∏–ª –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")

@router.callback_query(F.data == "settings_menu")
async def callback_settings_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        user_id = callback.from_user.id
        settings = db_manager.get_user_settings(user_id)

        response = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
        response += f"‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {settings.reminder_time.strftime('%H:%M')}\n"
        response += f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if settings.daily_reminder else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
        response += f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings.language}\n"

        await callback.message.edit_text(
            response,
            reply_markup=get_settings_keyboard()
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

@router.callback_query(F.data == "back_to_main")
async def callback_back_to_main(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await state.clear()
        await callback.message.edit_text(
            "üè† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")

@router.callback_query(F.data == "cancel")
async def callback_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    try:
        await state.clear()
        await callback.message.edit_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
