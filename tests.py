"""
–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è MoodTracker Bot
==================================

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞.
–¢–µ—Å—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –ª–µ–≥–∫–æ –ø–æ–Ω—è—Ç–Ω—ã.

–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤:
python tests.py

–ò–ª–∏ —Å –ø–æ–º–æ—â—å—é pytest:
pytest tests.py
"""

import unittest
import sys
import os
from datetime import date, datetime
from unittest.mock import Mock, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –±–æ—Ç–∞
from database.db_manager import DatabaseManager
from database.models import User, MoodEntry, Tag
from config import config
from utils.helpers import format_mood_entry
from keyboards.inline import get_main_menu_keyboard


class TestDatabaseManager(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç–∞–º - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self.db = DatabaseManager()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.test_db_path = "test_mood_tracker.db"
        self.db = DatabaseManager(self.test_db_path)
        self.db.init_db()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.test_user = self.db.get_or_create_user(
            user_id=123456789,
            username="test_user",
            first_name="Test User"
        )

    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        if os.path.exists(self.test_db_path):
            os.remove(self.test_db_path)

    def test_create_user(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω
        self.assertIsNotNone(self.test_user)
        self.assertEqual(self.test_user.user_id, 123456789)
        self.assertEqual(self.test_user.username, "test_user")
        self.assertEqual(self.test_user.first_name, "Test User")

        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

    def test_create_mood_entry(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è...")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        mood_entry = self.db.create_mood_entry(
            user_id=self.test_user.user_id,
            mood_score=4,
            note="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
            tags=["—Ä–∞–±–æ—Ç–∞", "—Å–ø–æ—Ä—Ç"]
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å
        self.assertIsNotNone(mood_entry)
        self.assertEqual(mood_entry.user_id, self.test_user.user_id)
        self.assertEqual(mood_entry.mood_score, 4)
        self.assertEqual(mood_entry.note, "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")

        print("‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

    def test_get_mood_entries(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è...")

        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
        for i in range(3):
            self.db.create_mood_entry(
                user_id=self.test_user.user_id,
                mood_score=i + 1,
                note=f"–ó–∞–ø–∏—Å—å #{i+1}"
            )

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏
        entries = self.db.get_mood_entries(self.test_user.user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertEqual(len(entries), 3)
        self.assertEqual(entries[0].mood_score, 3)  # –°–∞–º–∞—è —Å–≤–µ–∂–∞—è –∑–∞–ø–∏—Å—å
        self.assertEqual(entries[-1].mood_score, 1)  # –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å

        print("‚úÖ –ó–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!")

    def test_get_mood_stats(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è...")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        test_date = date.today()
        for score in [1, 3, 5, 4, 2, 5, 3]:
            self.db.create_mood_entry(
                user_id=self.test_user.user_id,
                mood_score=score,
                entry_date=test_date
            )

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.db.get_mood_stats(
            self.test_user.user_id,
            start_date=test_date,
            end_date=test_date
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.assertEqual(stats.total_entries, 7)
        self.assertEqual(stats.average_score, 3.29)  # (1+3+5+4+2+5+3)/7
        self.assertEqual(stats.best_day_score, 5)
        self.assertEqual(stats.worst_day_score, 1)

        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞!")


class TestHelpers(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""

    def test_format_mood_entry(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è...")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        mock_entry = Mock()
        mock_entry.mood_score = 4
        mock_entry.entry_date = date.today()
        mock_entry.created_at = datetime.now()
        mock_entry.note = "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞"
        mock_entry.tags = ["—Ä–∞–±–æ—Ç–∞", "—Å–ø–æ—Ä—Ç"]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
        formatted = format_mood_entry(mock_entry)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertIn("üôÇ –•–æ—Ä–æ—à–æ", formatted)
        self.assertIn("–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞", formatted)
        self.assertIn("—Ä–∞–±–æ—Ç–∞", formatted)
        self.assertIn("—Å–ø–æ—Ä—Ç", formatted)

        print("‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞!")

    def test_config_constants(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        self.assertEqual(config.MOOD_EMOJIS[1], "üò¢")
        self.assertEqual(config.MOOD_EMOJIS[5], "üòä")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        self.assertEqual(config.MOOD_NAMES[1], "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ")
        self.assertEqual(config.MOOD_NAMES[5], "–û—Ç–ª–∏—á–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        self.assertEqual(config.DIARY_TEXT_LIMIT, 500)

        print("‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")


class TestKeyboards(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""

    def test_main_menu_keyboard(self):
        """–¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é...")

        keyboard = get_main_menu_keyboard()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
        self.assertIsNotNone(keyboard)
        self.assertIsNotNone(keyboard.inline_keyboard)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
        buttons = []
        for row in keyboard.inline_keyboard:
            buttons.extend(row)

        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 5 –∫–Ω–æ–ø–æ–∫ –≤ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        self.assertEqual(len(buttons), 5)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_data –∫–Ω–æ–ø–æ–∫
        callback_datas = [btn.callback_data for btn in buttons]
        expected_callbacks = [
            "mood_record",
            "diary_menu",
            "tags_menu",
            "analytics_menu",
            "settings_menu"
        ]

        for expected in expected_callbacks:
            self.assertIn(expected, callback_datas)

        print("‚úÖ –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")


class TestModels(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö"""

    def test_user_model(self):
        """–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            user_id=123456,
            username="testuser",
            first_name="Test User",
            timezone="UTC+3",
            reminder_time="21:00",
            reminder_enabled=True
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è
        self.assertEqual(user.user_id, 123456)
        self.assertEqual(user.username, "testuser")
        self.assertEqual(user.first_name, "Test User")
        self.assertEqual(user.timezone, "UTC+3")
        self.assertEqual(user.reminder_time, "21:00")
        self.assertTrue(user.reminder_enabled)

        print("‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")

    def test_mood_entry_model(self):
        """–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è...")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        entry = MoodEntry(
            user_id=123456,
            mood_score=4,
            note="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å",
            entry_date=date.today(),
            created_at=datetime.now()
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è
        self.assertEqual(entry.user_id, 123456)
        self.assertEqual(entry.mood_score, 4)
        self.assertEqual(entry.note, "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å")
        self.assertEqual(entry.entry_date, date.today())

        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")

    def test_tag_model(self):
        """–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ —Ç–µ–≥–∞"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å —Ç–µ–≥–∞...")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
        tag = Tag(
            name="—Ä–∞–±–æ—Ç–∞",
            category="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            user_id=123456,
            color="#FF5733"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è
        self.assertEqual(tag.name, "—Ä–∞–±–æ—Ç–∞")
        self.assertEqual(tag.category, "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        self.assertEqual(tag.user_id, 123456)
        self.assertEqual(tag.color, "#FF5733")

        print("‚úÖ –ú–æ–¥–µ–ª—å —Ç–µ–≥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")


def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    print("\n" + "="*60)
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í MOODTRACKER BOT")
    print("="*60)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    suite.addTest(loader.loadTestsFromTestCase(TestDatabaseManager))
    suite.addTest(loader.loadTestsFromTestCase(TestHelpers))
    suite.addTest(loader.loadTestsFromTestCase(TestKeyboards))
    suite.addTest(loader.loadTestsFromTestCase(TestModels))

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)

    print("\n" + "="*60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)

    if result.wasSuccessful():
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print(f"üìà –ó–∞–ø—É—â–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {result.testsRun}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(result.errors)}")
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(result.failures)}")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨!")
        print(f"üìà –ó–∞–ø—É—â–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {result.testsRun}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(result.errors)}")
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(result.failures)}")

        if result.errors:
            print("\nüî¥ –û–®–ò–ë–ö–ò:")
            for test, error in result.errors:
                print(f"  ‚Ä¢ {test}: {error}")

        if result.failures:
            print("\nüü° –ü–†–û–í–ê–õ–´:")
            for test, failure in result.failures:
                print(f"  ‚Ä¢ {test}: {failure}")

    print("="*60)
    return result.wasSuccessful()


if __name__ == "__main__":
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ —Ñ–∞–π–ª–∞"""
    success = run_tests()
    sys.exit(0 if success else 1)
