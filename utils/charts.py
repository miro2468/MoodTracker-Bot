import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
import pandas as pd
import numpy as np
from datetime import datetime, date, timedelta
from typing import List, Dict, Any, Optional
from io import BytesIO

from database.models import MoodEntry
from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

class ChartGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""

    def __init__(self):
        self.colors = config.CHART_COLORS

    def generate_mood_trend_chart(self, entries: List[MoodEntry],
                                start_date: date, end_date: date) -> BytesIO:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        if not entries:
            return self._create_empty_chart("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = pd.DataFrame([{
            'date': entry.entry_date,
            'mood': entry.mood_score,
            'diary': bool(entry.diary_text)
        } for entry in entries])

        df = df.sort_values('date')
        df['date'] = pd.to_datetime(df['date'])

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig, ax = plt.subplots(figsize=(12, 6))

        # –õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        ax.plot(df['date'], df['mood'], 'o-', color=self.colors['good'],
               linewidth=2, markersize=6, alpha=0.8, label='–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ')

        # –¢–æ—á–∫–∏ —Å –¥–Ω–µ–≤–Ω–∏–∫–æ–≤—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
        diary_points = df[df['diary']]
        if not diary_points.empty:
            ax.scatter(diary_points['date'], diary_points['mood'],
                      color=self.colors['excellent'], s=80, marker='*',
                      label='–° –¥–Ω–µ–≤–Ω–∏–∫–æ–º', zorder=5)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        ax.set_ylim(0.5, 5.5)
        ax.set_yticks(range(1, 6))
        ax.set_yticklabels([f"{config.MOOD_EMOJIS[i]} {i}" for i in range(1, 6)])

        ax.set_title('üìà –¢—Ä–µ–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è', fontsize=16, pad=20)
        ax.set_xlabel('–î–∞—Ç–∞', fontsize=12)
        ax.set_ylabel('–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', fontsize=12)
        ax.legend()
        ax.grid(True, alpha=0.3)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
        plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)

        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ BytesIO
        buf = BytesIO()
        fig.savefig(buf, format='png', dpi=150, bbox_inches='tight')
        buf.seek(0)
        plt.close(fig)

        return buf

    def generate_weekday_stats_chart(self, entries: List[MoodEntry]) -> BytesIO:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"""
        if not entries:
            return self._create_empty_chart("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = pd.DataFrame([{
            'weekday': entry.entry_date.weekday(),
            'mood': entry.mood_score
        } for entry in entries])

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        weekday_stats = df.groupby('weekday').agg({
            'mood': ['mean', 'count', 'std']
        }).round(2)

        weekday_stats.columns = ['mean_mood', 'count', 'std']
        weekday_stats = weekday_stats.reset_index()

        # –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        weekday_names = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        weekday_stats['weekday_name'] = weekday_stats['weekday'].map(
            lambda x: weekday_names[x]
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8))

        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        bars1 = ax1.bar(weekday_stats['weekday_name'], weekday_stats['mean_mood'],
                       color=[self.get_mood_color(mood) for mood in weekday_stats['mean_mood']])
        ax1.set_title('üìÖ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏', fontsize=14)
        ax1.set_ylabel('–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ')
        ax1.set_ylim(0, 5.5)
        ax1.grid(True, alpha=0.3)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, mean_mood in zip(bars1, weekday_stats['mean_mood']):
            ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1,
                    f'{mean_mood:.1f}', ha='center', va='bottom', fontsize=10)

        # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
        bars2 = ax2.bar(weekday_stats['weekday_name'], weekday_stats['count'],
                       color='skyblue', alpha=0.7)
        ax2.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏', fontsize=14)
        ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
        ax2.grid(True, alpha=0.3)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, count in zip(bars2, weekday_stats['count']):
            ax2.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1,
                    str(int(count)), ha='center', va='bottom', fontsize=10)

        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ BytesIO
        buf = BytesIO()
        fig.savefig(buf, format='png', dpi=150, bbox_inches='tight')
        buf.seek(0)
        plt.close(fig)

        return buf

    def generate_tags_pie_chart(self, tag_stats: Dict[str, int]) -> BytesIO:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ —Ç–µ–≥–∞–º"""
        if not tag_stats:
            return self._create_empty_chart("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–≥–∞—Ö")

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        sorted_tags = sorted(tag_stats.items(), key=lambda x: x[1], reverse=True)

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ —Ç–æ–ø 10
        if len(sorted_tags) > 10:
            top_tags = dict(sorted_tags[:9])
            other_count = sum(count for _, count in sorted_tags[9:])
            top_tags['–î—Ä—É–≥–∏–µ'] = other_count
        else:
            top_tags = dict(sorted_tags)

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig, ax = plt.subplots(figsize=(10, 8))

        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–≥–æ–≤
        colors = plt.cm.Set3(np.linspace(0, 1, len(top_tags)))

        wedges, texts, autotexts = ax.pie(
            top_tags.values(),
            labels=top_tags.keys(),
            autopct='%1.1f%%',
            colors=colors,
            startangle=90,
            textprops={'fontsize': 10}
        )

        ax.set_title('üè∑Ô∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤', fontsize=16, pad=20)

        # –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        for autotext in autotexts:
            autotext.set_fontsize(9)
            autotext.set_fontweight('bold')

        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ BytesIO
        buf = BytesIO()
        fig.savefig(buf, format='png', dpi=150, bbox_inches='tight')
        buf.seek(0)
        plt.close(fig)

        return buf

    def generate_heatmap_chart(self, entries: List[MoodEntry]) -> BytesIO:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ —á–∞—Å–∞–º"""
        if not entries:
            return self._create_empty_chart("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = []
        for entry in entries:
            if entry.created_at:
                hour = entry.created_at.hour
                weekday = entry.created_at.weekday()
                data.append({
                    'hour': hour,
                    'weekday': weekday,
                    'mood': entry.mood_score
                })

        if not data:
            return self._create_empty_chart("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")

        df = pd.DataFrame(data)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        pivot_table = df.pivot_table(
            values='mood',
            index='weekday',
            columns='hour',
            aggfunc='mean'
        ).round(1)

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ä–µ–¥–Ω–∏–º
        pivot_table = pivot_table.fillna(df['mood'].mean())

        # –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        weekday_names = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        fig, ax = plt.subplots(figsize=(12, 6))

        sns.heatmap(
            pivot_table,
            annot=True,
            fmt='.1f',
            cmap='RdYlGn',
            center=3.0,
            vmin=1,
            vmax=5,
            ax=ax,
            cbar_kws={'label': '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'}
        )

        ax.set_title('üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏', fontsize=16, pad=20)
        ax.set_xlabel('–ß–∞—Å –¥–Ω—è', fontsize=12)
        ax.set_ylabel('–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', fontsize=12)
        ax.set_yticklabels(weekday_names, rotation=0)

        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ BytesIO
        buf = BytesIO()
        fig.savefig(buf, format='png', dpi=150, bbox_inches='tight')
        buf.seek(0)
        plt.close(fig)

        return buf

    def generate_mood_distribution_chart(self, entries: List[MoodEntry]) -> BytesIO:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        if not entries:
            return self._create_empty_chart("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        moods = [entry.mood_score for entry in entries]
        mood_counts = pd.Series(moods).value_counts().sort_index()

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig, ax = plt.subplots(figsize=(10, 6))

        bars = ax.bar(
            mood_counts.index,
            mood_counts.values,
            color=[self.get_mood_color(score) for score in mood_counts.index]
        )

        ax.set_title('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è', fontsize=16, pad=20)
        ax.set_xlabel('–û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è', fontsize=12)
        ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π', fontsize=12)
        ax.set_xticks(range(1, 6))
        ax.set_xticklabels([f"{config.MOOD_EMOJIS[i]} {i}" for i in range(1, 6)])
        ax.grid(True, alpha=0.3)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, count in zip(bars, mood_counts.values):
            ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1,
                   str(count), ha='center', va='bottom', fontsize=10)

        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ BytesIO
        buf = BytesIO()
        fig.savefig(buf, format='png', dpi=150, bbox_inches='tight')
        buf.seek(0)
        plt.close(fig)

        return buf

    def get_mood_color(self, score: float) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        return config.CHART_COLORS.get('neutral', '#FFEB3B')

    def _create_empty_chart(self, message: str) -> BytesIO:
        """–°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        fig, ax = plt.subplots(figsize=(8, 6))

        ax.text(0.5, 0.5, message,
               transform=ax.transAxes,
               ha='center', va='center',
               fontsize=14, color='gray')

        ax.set_xlim(0, 1)
        ax.set_ylim(0, 1)
        ax.axis('off')

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ BytesIO
        buf = BytesIO()
        fig.savefig(buf, format='png', dpi=150, bbox_inches='tight')
        buf.seek(0)
        plt.close(fig)

        return buf

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
chart_generator = ChartGenerator()
